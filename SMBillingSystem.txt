database indexes
postgres and postgres admin

SQL SCHEMA:

ACCOUNTS:
ACCOUNT_ID, USER_NAME, PASSWORD, ROLE_TYPE

CUSTOMER:
CUSTOMER_ID, ACCOUNT_ID, BALANCE, LOYAL_POINTS, TOTAL_DISCOUNT_EARNED

PRODUCT:
PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_QUANTITY, BY_ONE_GET_ONE, EXPIRY_DATE

CART:
CART_ID, CUSTOMER_ID, PRODUCT_ID, QUANTITY

BILL_LIST:
BILL_ID, BILL_DATE, CUSTOMER_ID, TOTAL_AMOUNT, SALES_PERSON_ID

BILL_PRODUCT_LIST:
BILL_PRODUCT_LIST_ID, BILL_ID, PRODUCT_ID, QUANTITY


SQL CREATE STATEMENTS->

CREATE TABLE ACCOUNTS(
	ACCOUNT_ID INT GENERATED BY DEFAULT AS IDENTITY 
    	(START WITH 101 INCREMENT BY 1) PRIMARY KEY,
	USER_NAME VARCHAR(25) UNIQUE NOT NULL,
	PASSSWORD VARCHAR(25) NOT NULL,
	ROLE_TYPE INT NOT NULL
);

CREATE TABLE CUSTOMER(
	CUSTOMER_ID INT GENERATED BY DEFAULT AS IDENTITY 
    	(START WITH 101 INCREMENT BY 1) PRIMARY KEY,
	ACCOUNT_ID INT,
	BALANCE INT DEFAULT 0 NOT NULL,
	LOYAL_POINTS INT DEFAULT 0 NOT NULL,
	TOTAL_DISCOUNT_EARNED INT DEFAULT 0 NOT NULL,
	FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS (ACCOUNT_ID) ON DELETE CASCADE
);		

CREATE TABLE PRODUCT(
	PRODUCT_ID INT GENERATED BY DEFAULT AS IDENTITY 
    	(START WITH 101 INCREMENT BY 1) PRIMARY KEY,
	PRODUCT_NAME VARCHAR(25) UNIQUE NOT NULL,
	PRODUCT_PRICE INT NOT NULL,
	PRODUCT_QUANTITY INT NOT NULL,
	BY_ONE_GET_ONE INT NOT NULL,
	EXPIRY_DATE DATE NOT NULL
);

CREATE TABLE CART(
	CART_ID INT GENERATED BY DEFAULT AS IDENTITY 
    	(START WITH 101 INCREMENT BY 1) PRIMARY KEY,
	CUSTOMER_ID INT,
	PRODUCT_ID INT,
	QUANTITY INT NOT NULL,
	FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID) ON DELETE CASCADE
);

CREATE TABLE BILL_LIST(
	BILL_ID INT GENERATED BY DEFAULT AS IDENTITY
    	(START WITH 101 INCREMENT BY 1) PRIMARY KEY,
	BILL_DATE DATE NOT NULL,
	CUSTOMER_ID INT,
	TOTAL_AMOUNT INT NOT NULL,
	SALES_PERSON_ID INT,
	FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
	FOREIGN KEY (SALES_PERSON_ID) REFERENCES ACCOUNTS(ACCOUNT_ID)
);

CREATE TABLE BILL_PRODUCT_LIST(
	BILL_PRODUCT_LIST_ID INT GENERATED BY DEFAULT AS IDENTITY
    	(START WITH 101 INCREMENT BY 1) PRIMARY KEY,
	BILL_ID INT,
	PRODUCT_ID INT,
	QUANTITY INT NOT NULL,
	FOREIGN KEY (BILL_ID) REFERENCES BILL_LIST(BILL_ID) ON DELETE CASCADE,
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);

DROP TABLE ACCOUNTS cascade;

INSERT INTO ACCOUNTS(USER_NAME,PASSSWORD,ROLE_TYPE) 
VALUES
('bharaths','Bhar123*',0),
('abhi','Ab1!abcd',1),
('kishan','Bc1!abcd',1),
('varun','Cd1!abcd',1),
('akshar','Aksh123*',2),
('nischay','Nisc123*',2),
('pruthvik','De1!abcd',1),
('madan','Ef1!abcd',1);

INSERT INTO CUSTOMER(ACCOUNT_ID,BALANCE,LOYAL_POINTS,LOYAL_POINTS_SPENT,TOTAL_DISCOUNT_EARNED) 
VALUES
(111,500,10,50,150),
(112,300,15,36,200),
(113,400,8,27,70),
(116,350,5,18,120),
(117,450,6,38,300);

INSERT INTO PRODUCT(PRODUCT_NAME,PRODUCT_PRICE,PRODUCT_QUANTITY,BY_ONE_GET_ONE,EXPIRY_DATE) 
VALUES
('Biscuit',10,50,0,'2022-07-15'),
('Soap',25,76,1,'2030-01-01'),
('Tooth Paste',20,30,1,'2030-01-01'),
('Tooth Brush',15,15,0,'2030-01-01'),
('Chocolate',5,250,0,'2022-04-20');

INSERT INTO CART(CUSTOMER_ID,PRODUCT_ID,QUANTITY) 
VALUES
(101,103,3),
(101,101,10),
(102,105,50),
(102,102,2),
(102,104,1);

INSERT INTO BILL_LIST(BILL_DATE,CUSTOMER_ID,TOTAL_AMOUNT,SALES_PERSON_ID) 
VALUES
('2021-12-26',113,400,114),
('2021-12-10',114,700,115),
('2021-12-01',113,1500,114),
('2021-11-20',113,50,114),
('2021-12-20',114,1600,115),
('2021-12-26',114,400,114),
('2021-12-10',115,700,115),
('2021-12-01',116,1500,114),
('2021-11-20',117,50,114),
('2021-12-20',113,1600,115);

INSERT INTO BILL_PRODUCT_LIST(BILL_ID,PRODUCT_ID,QUANTITY) 
VALUES
(111,101,40),
(112,101,30),
(112,102,10),
(113,103,30),
(114,105,25),
(115,103,60);

1. Create report on Top Selling products.
SELECT BPL.PRODUCT_ID, P.PRODUCT_NAME, SUM(BPL.QUANTITY) AS QUANTITY_SOLD
FROM BILL_PRODUCT_LIST BPL, PRODUCT P
WHERE P.PRODUCT_ID=BPL.PRODUCT_ID
GROUP BY BPL.PRODUCT_ID,P.PRODUCT_NAME ORDER BY QUANTITY_SOLD DESC LIMIT 2;

2. Create report on Top 10 Customers.
SELECT BL.CUSTOMER_ID, A.USER_NAME, C.BALANCE,C.LOYAL_POINTS,C.TOTAL_DISCOUNT_EARNED,
SUM(BL.TOTAL_AMOUNT) AS MONEY_SPENT
FROM BILL_LIST BL, CUSTOMER C, ACCOUNTS A
WHERE C.CUSTOMER_ID=BL.CUSTOMER_ID AND C.ACCOUNT_ID=A.ACCOUNT_ID
GROUP BY BL.CUSTOMER_ID,A.USER_NAME, C.BALANCE,C.LOYAL_POINTS,C.TOTAL_DISCOUNT_EARNED
ORDER BY MONEY_SPENT DESC LIMIT 2;

3. Create report on Customer who did not buy products in last 1 month.
SELECT C.CUSTOMER_ID, C.ACCOUNT_ID, C.BALANCE, C.LOYAL_POINTS, 
C.LOYAL_POINTS_SPENT, C.TOTAL_DISCOUNT_EARNED
FROM CUSTOMER C, BILL_LIST BL
WHERE C.CUSTOMER_ID=BL.CUSTOMER_ID AND 
BL.BILL_DATE > date_trunc('month', current_date - interval '1' month)
GROUP BY C.CUSTOMER_ID;

4. Create report on Which Sales person had billed more bills.
SELECT A.ACCOUNT_ID,A.USER_NAME,COUNT(BL.SALES_PERSON_ID) AS CSPI
FROM BILL_LIST BL, ACCOUNTS A
WHERE A.ACCOUNT_ID=BL.SALES_PERSON_ID
GROUP BY A.ACCOUNT_ID,A.USER_NAME,BL.SALES_PERSON_ID
ORDER BY CSPI DESC
LIMIT 1;

5. Report on Days wise revenue for past one week.
SELECT BILL_DATE,SUM(TOTAL_AMOUNT)
FROM BILL_LIST
WHERE BILL_DATE>(CURRENT_DATE-7)
GROUP BY(BILL_DATE);

6. Customers who have signed up but did not make a purchase.
SELECT C.CUSTOMER_ID,C.ACCOUNT_ID,C.BALANCE,C.LOYAL_POINTS,C.LOYAL_POINTS_SPENT,C.TOTAL_DISCOUNT_EARNED
FROM CUSTOMER C LEFT JOIN BILL_LIST BL ON C.CUSTOMER_ID=BL.CUSTOMER_ID
WHERE BL.BILL_ID IS NULL
GROUP BY C.CUSTOMER_ID,C.CUSTOMER_ID,C.ACCOUNT_ID,C.BALANCE,C.LOYAL_POINTS,C.LOYAL_POINTS_SPENT,
C.TOTAL_DISCOUNT_EARNED

7. Products that is needed to be brought soon to avoid out of stock.
SELECT * FROM PRODUCT WHERE PRODUCT_QUANTITY<5

8. Products that are expired but still in inventory.
SELECT * FROM PRODUCT WHERE EXPIRY_DATE<CURRENT_DATE

9. Products that is not sold at all.
SELECT P.PRODUCT_ID,P.PRODUCT_NAME,P.PRODUCT_PRICE,P.PRODUCT_QUANTITY,P.BY_ONE_GET_ONE,P.EXPIRY_DATE
FROM PRODUCT P LEFT JOIN BILL_PRODUCT_LIST BPL ON P.PRODUCT_ID=BPL.PRODUCT_ID
WHERE BPL.BILL_PRODUCT_LIST_ID IS NULL
GROUP BY P.PRODUCT_ID,P.PRODUCT_NAME,P.PRODUCT_PRICE,P.PRODUCT_QUANTITY,P.BY_ONE_GET_ONE,P.EXPIRY_DATE

10.Products that are out of stock.
SELECT * FROM PRODUCT
WHERE PRODUCT_QUANTITY=0;

2. View report on all bill statements.
SELECT A.USER_NAME,C.LOYAL_POINTS,C.LOYAL_POINTS_SPENT 
FROM CUSTOMER C,ACCOUNTS A
WHERE C.ACCOUNT_ID=A.ACCOUNT_ID

3. How loyalty points are collected and spent.
SELECT BL.BILL_ID,BL.BILL_DATE,A.USER_NAME,P.PRODUCT_NAME,BPL.QUANTITY,BL.TOTAL_AMOUNT,A1.USER_NAME
FROM BILL_LIST BL,BILL_PRODUCT_LIST BPL,CUSTOMER C,ACCOUNTS A,PRODUCT P,ACCOUNTS A1
WHERE BL.BILL_ID=BPL.BILL_ID AND BL.CUSTOMER_ID=C.CUSTOMER_ID AND C.ACCOUNT_ID=A.ACCOUNT_ID 
AND BPL.PRODUCT_ID=P.PRODUCT_ID AND A1.ACCOUNT_ID=BL.SALES_PERSON_ID

4. How much they saved on discounts and offers.
SELECT C.CUSTOMER_ID,A.USER_NAME,C.TOTAL_DISCOUNT_EARNED 
FROM CUSTOMER C, ACCOUNTS A
WHERE C.ACCOUNT_ID=A.ACCOUNT_ID;

5. How much money is left in their wallet.
SELECT C.CUSTOMER_ID,A.USER_NAME,C.BALANCE
FROM CUSTOMER C, ACCOUNTS A
WHERE C.ACCOUNT_ID=A.ACCOUNT_ID;